//
// GameAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class GameAPI {
    /**
     cancel started or waiting game

     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cancelGame(_id: Int64, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        cancelGameWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     cancel started or waiting game
     - POST /game/{id}/cancel
     - 

     - parameter _id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func cancelGameWithRequestBuilder(_id: Int64) -> RequestBuilder<Void> {
        var path = "/game/{id}/cancel"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Endpoint to create new game

     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createNewGame(body: CreateGame, completion: @escaping ((_ data: Game?,_ error: Error?) -> Void)) {
        createNewGameWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Endpoint to create new game
     - POST /game/create
     - 

     - examples: [{contentType=application/json, example={
  "mainPlayer" : 1,
  "players" : 6,
  "topic" : "topic",
  "id" : 0,
  "gameState" : "gameState"
}}]
     - parameter body: (body)  

     - returns: RequestBuilder<Game> 
     */
    open class func createNewGameWithRequestBuilder(body: CreateGame) -> RequestBuilder<Game> {
        let path = "/game/create"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Game>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Endpoint to get a game by id

     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGame(_id: Int64, completion: @escaping ((_ data: Game?,_ error: Error?) -> Void)) {
        getGameWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Endpoint to get a game by id
     - GET /game/{id}
     - 

     - examples: [{contentType=application/json, example={
  "mainPlayer" : 1,
  "players" : 6,
  "topic" : "topic",
  "id" : 0,
  "gameState" : "gameState"
}}]
     - parameter _id: (path)  

     - returns: RequestBuilder<Game> 
     */
    open class func getGameWithRequestBuilder(_id: Int64) -> RequestBuilder<Game> {
        var path = "/game/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Game>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Endpoint to get game by status { Wait, Started, End}

     - parameter status: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGameByStatus(status: String, completion: @escaping ((_ data: [Game]?,_ error: Error?) -> Void)) {
        getGameByStatusWithRequestBuilder(status: status).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Endpoint to get game by status { Wait, Started, End}
     - GET /games/{status}
     - 

     - examples: [{contentType=application/json, example=[ {
  "mainPlayer" : 1,
  "players" : 6,
  "topic" : "topic",
  "id" : 0,
  "gameState" : "gameState"
}, {
  "mainPlayer" : 1,
  "players" : 6,
  "topic" : "topic",
  "id" : 0,
  "gameState" : "gameState"
} ]}]
     - parameter status: (path)  

     - returns: RequestBuilder<[Game]> 
     */
    open class func getGameByStatusWithRequestBuilder(status: String) -> RequestBuilder<[Game]> {
        var path = "/games/{status}"
        let statusPreEscape = "\(status)"
        let statusPostEscape = statusPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{status}", with: statusPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[Game]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Endpoint to get all games

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGames(completion: @escaping ((_ data: [Game]?,_ error: Error?) -> Void)) {
        getGamesWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Endpoint to get all games
     - GET /games
     - 

     - examples: [{contentType=application/json, example=[ {
  "mainPlayer" : 1,
  "players" : 6,
  "topic" : "topic",
  "id" : 0,
  "gameState" : "gameState"
}, {
  "mainPlayer" : 1,
  "players" : 6,
  "topic" : "topic",
  "id" : 0,
  "gameState" : "gameState"
} ]}]

     - returns: RequestBuilder<[Game]> 
     */
    open class func getGamesWithRequestBuilder() -> RequestBuilder<[Game]> {
        let path = "/games"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[Game]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     get games where user are invited

     - parameter userId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getInvitation(userId: Int64, completion: @escaping ((_ data: [Game]?,_ error: Error?) -> Void)) {
        getInvitationWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     get games where user are invited
     - GET /games/invitation/{userId}
     - 

     - examples: [{contentType=application/json, example=[ {
  "mainPlayer" : 1,
  "players" : 6,
  "topic" : "topic",
  "id" : 0,
  "gameState" : "gameState"
}, {
  "mainPlayer" : 1,
  "players" : 6,
  "topic" : "topic",
  "id" : 0,
  "gameState" : "gameState"
} ]}]
     - parameter userId: (path)  

     - returns: RequestBuilder<[Game]> 
     */
    open class func getInvitationWithRequestBuilder(userId: Int64) -> RequestBuilder<[Game]> {
        var path = "/games/invitation/{userId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[Game]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     get all players of the game

     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPlayers(_id: Int64, completion: @escaping ((_ data: [User]?,_ error: Error?) -> Void)) {
        getPlayersWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     get all players of the game
     - GET /game/{id}/players
     - 

     - examples: [{contentType=application/json, example=[ {
  "avatarUrl" : "avatarUrl",
  "losesCount" : 1,
  "winningCount" : 6,
  "id" : 0,
  "login" : "login"
}, {
  "avatarUrl" : "avatarUrl",
  "losesCount" : 1,
  "winningCount" : 6,
  "id" : 0,
  "login" : "login"
} ]}]
     - parameter _id: (path)  

     - returns: RequestBuilder<[User]> 
     */
    open class func getPlayersWithRequestBuilder(_id: Int64) -> RequestBuilder<[User]> {
        var path = "/game/{id}/players"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[User]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Endpoint to get games connected to user

     - parameter userId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserGames(userId: Int64, completion: @escaping ((_ data: [Game]?,_ error: Error?) -> Void)) {
        getUserGamesWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Endpoint to get games connected to user
     - GET /games/user/{userId}
     - 

     - examples: [{contentType=application/json, example=[ {
  "mainPlayer" : 1,
  "players" : 6,
  "topic" : "topic",
  "id" : 0,
  "gameState" : "gameState"
}, {
  "mainPlayer" : 1,
  "players" : 6,
  "topic" : "topic",
  "id" : 0,
  "gameState" : "gameState"
} ]}]
     - parameter userId: (path)  

     - returns: RequestBuilder<[Game]> 
     */
    open class func getUserGamesWithRequestBuilder(userId: Int64) -> RequestBuilder<[Game]> {
        var path = "/games/user/{userId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[Game]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Endpoint to get user games with status

     - parameter userId: (path)  
     - parameter status: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserGamesByStatus(userId: Int64, status: String, completion: @escaping ((_ data: [Game]?,_ error: Error?) -> Void)) {
        getUserGamesByStatusWithRequestBuilder(userId: userId, status: status).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Endpoint to get user games with status
     - GET /games/user/{userId}/{status}
     - 

     - examples: [{contentType=application/json, example=[ {
  "mainPlayer" : 1,
  "players" : 6,
  "topic" : "topic",
  "id" : 0,
  "gameState" : "gameState"
}, {
  "mainPlayer" : 1,
  "players" : 6,
  "topic" : "topic",
  "id" : 0,
  "gameState" : "gameState"
} ]}]
     - parameter userId: (path)  
     - parameter status: (path)  

     - returns: RequestBuilder<[Game]> 
     */
    open class func getUserGamesByStatusWithRequestBuilder(userId: Int64, status: String) -> RequestBuilder<[Game]> {
        var path = "/games/user/{userId}/{status}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let statusPreEscape = "\(status)"
        let statusPostEscape = statusPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{status}", with: statusPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[Game]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
